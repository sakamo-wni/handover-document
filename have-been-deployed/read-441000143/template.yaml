AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.

Parameters:
  FunctionName:
    Description: "set function name of Lambda."
    Type: String
    Default: "read-441000143"   

  MDBucket:
    Description: "set environment variable 'md_bucket' of lambda."
    Type: String 

  StockS3:
    Description: "set lambda environment variable of stock on S3 bucket."
    Type: String
    Default: wni-wfc-stock-ane1

  LambdaSecurityGroup:
    Type: String
    Default: sg-05039cc5f8306b939

  PrivateSubnet1:
    Type: String
    Default: subnet-04d708d68e936f644

  PrivateSubnet2:
    Type: String
    Default: subnet-0b03c2d3196bd7ab9

  PrivateSubnet3:
    Type: String
    Default: subnet-07f4360405f9edc46

  EventSnsTopicsArn:
    Description: "set SNS ARN of stock_on_s3."
    Type: String
    Default: arn:aws:sns:ap-northeast-1:928225274854:TagID-441000143

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${StockS3}/*"
                  - !Sub "arn:aws:s3:::${StockS3}"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${MDBucket}/*"
                  - !Sub "arn:aws:s3:::${MDBucket}"
        - PolicyName: LambdaSQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt Queue.Arn

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FunctionName}"
      RetentionInDays: 14

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      QueueName: !Sub "${FunctionName}-sqs"

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:*"
            Resource: !GetAtt Queue.Arn
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt Queue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Ref EventSnsTopicsArn
      Queues:
        - !Ref Queue

  SubscriptionNetherlandsAWS441000143:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt Queue.Arn
      TopicArn: !Ref EventSnsTopicsArn
      FilterPolicy: 
        time_diff: 
          - 
            numeric: 
              - <=
              - 3600

  Function:
    Type: AWS::Serverless::Function
    DependsOn: 
      - LambdaExecutionRole
      - Queue
    Properties:
      Runtime: python3.12
      Timeout: 60
      CodeUri: app/
      Architectures: 
        - x86_64
      Environment:
        Variables:
          md_bucket: !Ref MDBucket
          stock_s3: !Ref StockS3
      FunctionName: !Ref FunctionName
      Handler: main.main
      Description: "create Hourly OBS file from Hungary Országos Meteorológiai Szolgálat(OMSZ)"
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3

Outputs:
  FunctionName:
    Description: "lambda function name."
    Value: !Ref FunctionName

  LogGroup:
    Description: "CloudWatchLogs."
    Value: !Ref LogGroup